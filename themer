#!/bin/sh

DIR=`dirname $(readlink -f $0)`

# ---
# Displays the command help and an error message, if present.
#
# @param $1 An error message.
# ---
function help() {
    if [ "$*" != "" ] ; then
        echo "themer: $*"
        echo "";
    fi

cat << EOF
Usage: themer [OPTION] THEME
Changes the wallpaper and current theme for bspwm, polybar and more.

Options:
  -h, --help    Display this help and exit
  -l, --list    Display the list of available themes
EOF

    exit 0;
}

# ---
# Displays a list of available themes
# ---
function list() {
    echo "Available themes:"

    ls -la $DIR/themes | \
        grep "^d" | \
        sed -e "s/\s\+/ /g" | \
        cut -d ' ' -f 9 | \
        grep "^[^.]" | \
        sed "s/^/    /g"

    exit 0
}

# ---
# Changes the current theme.
# ---
function main() {
    LAST=`cat $DIR/last`

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h | --help ) help ;;

            -l | --list ) list ;;

            -*)           help "Unknown option '$1'" ;;
            * )           THEME=$1 ;;
        esac

        shift;
    done

    # Apply last used theme
    if [[ ! $THEME ]] && [[  $LAST ]]; then
        THEME=$LAST
    fi

    # No theme to apply
    if [[ ! $THEME ]] || [[ ! -d $DIR/themes/$THEME ]]; then
        echo -e "\E[31;5merror: unknown theme\033[0m"
        help
        exit -1
    fi

    echo $THEME > $DIR/last

    echo "Applying $THEME theme..."

    updateMutt      $THEME
    updatePolybar   $THEME
    updateRofi      $THEME
    updateTermite   $THEME
    updateTmux      $THEME
    updateVim       $THEME
    updateWallpaper $THEME

    updateBspwm     $THEME
}

# ---
# Updates the bspwm configuration.
#
# @param $1 The theme name.
# ---
function updateBspwm() {
    if [[ ! -x `command -v bspwm` ]] || [[ ! -f $DIR/themes/$1/bspwm/config ]]; then
        return
    fi

    echo -en "  Changing bspwm theme..."
    cp $DIR/themes/$1/bspwm/config $HOME/.config/bspwm/theme
    source $HOME/.config/bspwm/theme
    echo -e "\E[37;32mDONE\033[0m"
}

# ---
# Updates the mutt theme.
#
# @param $1 The theme name.
# ---
function updateMutt() {
    if [[ ! -f $DIR/themes/$1/mutt/config ]]; then
        return
    fi

    echo -en "  Changing mutt theme..."

    cp $DIR/themes/$1/mutt/config $HOME/.config/mutt/theme

    sed -i -e "/^source.*theme$/d" $(readlink -f $HOME/.muttrc)
    echo "source ~/.config/mutt/theme" >> $HOME/.muttrc

    echo -e "\E[37;32mDONE\033[0m"
}

# ---
# Changes the polybar theme.
#
# @param $1 The theme name.
# ---
function updatePolybar() {
    if [[ ! -x `command -v polybar` ]] || [[ ! -f $DIR/themes/$1/polybar/config ]]; then
        return
    fi

    export MONITOR=`cat /tmp/monitor`
    export AC=`ls /sys/class/power_supply | grep AC`
    export WLAN=`ifconfig | grep wlp | cut -d ':' -f1`

    echo -en "  Changing polybar theme..."

    cp $DIR/themes/$1/polybar/config $HOME/.config/polybar/config

    bars=$(grep "\[bar/.*\]" $HOME/.config/polybar/config | \
        sed -e "s/\[bar\/\(.*\)\]/\1/g")

    killall polybar > /dev/null 2>&1

    for bar in $bars; do
        polybar $bar > /tmp/polybar.log 2>&1 &
    done

    for m in `mons | grep "enabled" | sed -e "s/\s\+/ /g" | cut -d ' ' -f2`; do
        bspc config -m $m top_padding 0
        bspc config -m $m bottom_padding 0
    done

    # Fix top padding for primary monitor
    if [ $(grep "bar/top" ~/.config/polybar/config) ]; then
        height=$(grep "bar/top" ~/.config/polybar/config -A 1 | \
            grep "height" | sed -e "s/height\s*=\s*//g")
        bspc config -m $PRIMARY top_padding $height
    fi

    # Fix bottom padding for primary monitor
    if [ $(grep "bar/bottom" ~/.config/polybar/config) ]; then
        height=$(grep "bar/bottom" ~/.config/polybar/config -A 1 | \
            grep "height" | sed -e "s/height\s*=\s*//g")
        bspc config -m $PRIMARY bottom_padding $height
    fi

    echo -e "\E[37;32mDONE\033[0m"
}

# ---
# Changes the rofi theme.
#
# @param $1 The theme name.
# ---
function updateRofi() {
    if [[ ! -x `command -v rofi` ]] || [[ ! -f $DIR/themes/$1/rofi/config ]]; then
        return
    fi

    echo -en "  Changing rofi theme..."
    cp $DIR/themes/$1/rofi/config $HOME/.config/rofi/config
    echo -e "\E[37;32mDONE\033[0m"
}

# ---
# Changes the termite theme.
#
# @param $1 The theme name.
# ---
function updateTermite() {
    if [[ ! -x `command -v termite` ]] || [[ ! -f $DIR/themes/$1/termite/config ]]; then
        return
    fi

    echo -en "  Changing termite theme..."
    cp $DIR/themes/$1/termite/config $HOME/.config/termite/config
    xdotool key 'ctrl+shift+r'
    echo -e "\E[37;32mDONE\033[0m"
}

# ---
# Changes the tmux theme.
#
# @param $1 The theme name.
# ---
function updateTmux() {
    if [[ ! -x `command -v tmux` ]] || [[ ! -f $DIR/themes/$THEME/tmux/theme.conf ]]; then
        return
    fi

    echo -en "  Changing tmux theme..."
    cp $DIR/themes/$THEME/tmux/theme.conf $HOME/.config/tmux/theme.conf

    if [[ `ps aux | grep tmux | tail -n +2` ]]; then
        tmux source-file $HOME/.config/tmux/theme.conf
    fi

    echo -e "\E[37;32mDONE\033[0m"
}

# ---
# Changes the vim colorschemes.
#
# @param $1 The theme name.
# ---
function updateVim() {
    if [[ ! -x `command -v vim` ]]; then
        return
    fi

    if [[ -f $DIR/themes/$1/vim/colorscheme.vim ]]; then
        echo -en "  Changing vim theme..."

        if [[ ! -d $HOME/.config/nvim/colors ]]; then
            mkdir -p $HOME/.config/nvim/colors
        fi

        cp $DIR/themes/$1/vim/colorscheme.vim $HOME/.config/nvim/colors/$1.vim
        sed -i -e "/^colorscheme.*$/d" $HOME/.config/nvim/autoload/theme.vim
        echo "colorscheme $1" >> $HOME/.config/nvim/autoload/theme.vim

        echo -e "\E[37;32mDONE\033[0m"
    fi

    if [[ -f $DIR/themes/$1/vim/lightline.vim ]]; then
        echo -en "  Changing vim lightline theme..."

        if [[ ! -d $HOME/.config/nvim/autoload/lightline/colorscheme ]]; then
            mkdir -p $HOME/.config/nvim/autoload/lightline/colorscheme
        fi

        cp $DIR/themes/$1/vim/lightline.vim $HOME/.config/nvim/autoload/lightline/colorscheme/$1.vim
        sed -i -e "/source.*/d" $HOME/.config/nvim/autoload/theme.vim
        echo "source ~/.vim/autoload/lightline/colorscheme/$1.vim" >> $HOME/.config/nvim/autoload/theme.vim

        echo -e "\E[37;32mDONE\033[0m"
    fi
}

# ---
# Changes the current wallpaper.
#
# @param $1 The theme name.
# ---
function updateWallpaper() {
    if [[ ! -x `command -v feh` ]] || \
            [[ ! -d $DIR/themes/$1/wallpaper  ]] || \
            [[ ! `ls $DIR/themes/$1/wallpaper | grep ".*\.\(png\|jpg\)"` ]]; then
        return
    fi

    echo -en "  Changing wallpaper..."

    WALLPAPER=`ls $DIR/themes/$1/wallpaper | grep ".*\.\(png\|jpg\)"`
    ARGS='';

    for w in $WALLPAPER; do
        ARGS="$ARGS--bg-scale $DIR/themes/$1/wallpaper/$w "
    done

    feh $ARGS

    echo -e "\E[37;32mDONE\033[0m"
}

main "$@"
